pipeline {
    agent any

    environment {
        EC2_USER = 'ec2-user'
        EC2_HOST = ''
        PRIVATE_KEY = credentials('SSH-EC2')
        JAR_NAME = 'app.jar'
        IMAGE_NAME = 'revstay'
        CONTAINER_NAME = 'revstay'
    }

    stages {
        stage('Clone Repo') {
            steps {
                git branch: 'main', url: 'https://github.com/250224-JavaReactAWS/Team-1/tree/main'
            }
        }

        stage('Build JAR with Maven') {
            steps {
                sh 'mvn clean package -DskipTests'
            }
        }

        // stage('Build Docker Image') {
        //     steps {
        //         sh 'docker build -t $IMAGE_NAME .'
        //     }
        // }

        // stage('Save Docker Image & SCP to EC2') {
        //     steps {
        //         sh '''
        //         docker save $IMAGE_NAME | bzip2 > image.tar.bz2
        //         scp -i $PRIVATE_KEY image.tar.bz2 $EC2_USER@$EC2_HOST:~/
        //         '''
        //     }
        // }
        
        stage('SCP JAR to EC2') {
            steps {
                sh '''
                scp -i $PRIVATE_KEY target/$JAR_NAME $EC2_USER@$EC2_HOST:~/
                '''
            }
        }
        
        stage('Check if docker is installed, if not install it') {
            steps {
                sh '''
                ssh -i $PRIVATE_KEY $EC2_USER@$EC2_HOST 'bash -s' <<'ENDSSH'
                    if ! command -v docker &> /dev/null; then
                        echo "Docker not found, installing..."
                        sudo yum update -y
                        sudo amazon-linux-extras install docker -y
                        sudo service docker start
                        sudo usermod -aG docker $EC2_USER
                    else
                        echo "Docker is already installed."
                    fi
                ENDSSH
                '''
            }
        }

        stage('Build Docker Image') {
            steps {
                sh '''
                ssh -i $PRIVATE_KEY $EC2_USER@$EC2_HOST 'bash -s' <<'ENDSSH'
                    docker build -t $IMAGE_NAME .
                ENDSSH
                '''
            }
        }

        stage('Deploy to EC2') {
            steps {
                sh '''
                ssh -i $PRIVATE_KEY $EC2_USER@$EC2_HOST 'bash -s' <<'ENDSSH'
                    docker stop $CONTAINER_NAME || true
                    docker rm $CONTAINER_NAME || true
                    bunzip2 -f image.tar.bz2
                    docker load < image.tar
                    docker run -d -p 8080:8080 --name $CONTAINER_NAME $IMAGE_NAME
                ENDSSH
                '''
            }
        }
    }
}